{
	"info": {
		"_postman_id": "b6c2b0e9-4d0a-403c-888d-3f478c592b79",
		"name": "group_22_1_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 - first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// let a = request.body;\r",
							"// var jsonData = pm.response.json();\r",
							"// pm.test(\"Your test name\", function () {\r",
							"//     pm.expect(jsonData).to.eql(a);\r",
							"// });\r",
							"\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2 - user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Nadya\"); \r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"25\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"let name_body = request.data.name; // Nadya\r",
							"console.log(name_body);\r",
							"\r",
							"let age_body = request.data.age; // 25\r",
							"console.log(age_body);\r",
							"\r",
							"let salary_body = +request.data.salary; // 1000\r",
							"console.log(salary_body);\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name is body\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(name_body); \r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age is body\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(age_body);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary is body\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(salary_body);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4); // 4000\r",
							"});\r",
							"// console.log(jsonData.family.u_salary_1_5_year);\r",
							"// console.log(jsonData.salary*4);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nadya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3 - object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let name_url = pm.request.url.query.toObject().name\r",
							"console.log(name_url)\r",
							"\r",
							"let age_url = pm.request.url.query.toObject().age\r",
							"console.log(age_url)\r",
							"\r",
							"let salary_url = +pm.request.url.query.toObject().salary\r",
							"console.log(salary_url)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name is url\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(name_url); \r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age is url\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(age_url); \r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary is url\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(salary_url); \r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры name\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры age\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Проверить, что параметр name имеет значение Luky.\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.be.oneOf([\"Luky\"])\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Проверить, что параметр age имеет значение 4.\", () => {\r",
							"  pm.expect(jsonData.family.pets.dog.age)\r",
							"    .to.be.oneOf([4]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Nadya&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nadya"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4 - object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let name_url = pm.request.url.query.toObject().name\r",
							"console.log(name_url)\r",
							"\r",
							"let age_url = pm.request.url.query.toObject().age\r",
							"console.log(age_url)\r",
							"\r",
							"let salary_url = +pm.request.url.query.toObject().salary\r",
							"console.log(salary_url)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name is url\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(name_url); \r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age is url\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+age_url); \r",
							"});\r",
							"// console.log(\"проверка1\", jsonData.age)\r",
							"// console.log(\"проверка2\", age_url)\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(salary_url)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let salary_1 = jsonData.salary[0]\r",
							"console.log(salary_1)\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let salary_2 = jsonData.salary[1]\r",
							"console.log(salary_2)\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let salary_3 = jsonData.salary[2]\r",
							"console.log(salary_3)\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary-0\", function () {\r",
							"    pm.expect(salary_1).to.eql(salary_url); \r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary-1\", function () {\r",
							"    pm.expect(+salary_2).to.eql(salary_url*2); \r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary-2\", function () {\r",
							"    pm.expect(+salary_3).to.eql(salary_url*3); \r",
							"});\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i = 0; i < jsonData.salary.length; i++){\r",
							"    console.log(\"salary_cycle\", jsonData.salary[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Nadya&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nadya"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5 - user_info_2 -1,2,3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let name_body = request.data.name; // Nadya\r",
							"console.log(name_body);\r",
							"\r",
							"let age_body = request.data.age; // 25\r",
							"console.log(age_body);\r",
							"\r",
							"let salary_body = +request.data.salary; // 1000\r",
							"console.log(salary_body);\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response имеет параметр person\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"параметр start_qa_salary равен salary из request\", function(){\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(salary_body); // 1000\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_6_months равен salary из request\", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary_body*2); // 2000\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_12_months равен salary из request\", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary_body*2.7); // 2700\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_1.5_year равен salary из request\", function(){\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(salary_body*3.3); // 3300\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_3.5_years равен salary из request\", function(){\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(salary_body*3.8); // 3800\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"параметре person, 1-й элемент из u_name равен salary из request\", function(){\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(salary_body); // 1000\r",
							"});\r",
							"//console.log(\"name[1] =   \", jsonData.person.u_name[1])\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"параметр u_age равен age из request\", function(){\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+age_body); // 25\r",
							"});\r",
							"//console.log(\"u_age =   \", jsonData.person.u_age)\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"параметр u_salary_5_years равен salary из request\", function(){\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(salary_body*4.2); // 4200\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in jsonData.person){\r",
							"    console.log(\"person_cycle\", i);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}